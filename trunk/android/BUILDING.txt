How to build the Android port of s3v
====================================

Customizing
-----------

This doesn't quite work yet; the model needs to be made configurable first.
Later, this section will describe how to get a custom model into the app, and
how to change the Google Analytics key.

The open-source release does not include Zygote's 3d data, and the cow dataset
isn't hooked up either. To get a model to show up, you need to follow these
somewhat involved steps (this will hopefully become easier in the future):

  1.) Add f_entities.txt to res/raw. f_entities.txt is used for the text in the
  info bubbles that appear when the user taps an entity. It is a CSV file that
  contains the six newline-separated layer descriptions "circulatory",
  "connective", "muscle", "nervous", "organs", "skeleton", and "skin". Every
  layer can contain an arbitrary number of entities. Every entity consists of a
  single line with the 8 fields entity id (used to map the entity to the json
  files described below), bubble text (shows up in the app), and six floats
  that describe the bounding box of the entity. This file is read by
  Base.loadEntities(). It might look like this:

    circulatory
    L_Some_Name,some text,9.59,131.08,-3.90,16.75,135.04,-1.23

    connective
    L_Some_Other_Name,some other text,11.87,134.98,-3.77,13.41,136.39,-1.38

    muscle
    L_Muscle_1,muscle 1,17.90,74.03,1.62,19.98,80.39,3.87
    L_Muscle_2,muscle 2,21.63,77.17,2.64,25.26,80.52,6.10

    nervous
    L_Nerve,nerve,11.46,124.69,-5.65,19.05,132.87,-1.72
    L_Nerve2,nerve 2,21.05,72.69,2.45,26.43,79.59,8.08

    organs
    Appendix,appendix,-8.12,90.35,3.15,-6.12,93.89,4.96
    Bileduct,bile duct,-5.61,108.05,1.48,4.23,116.40,4.06

    skeleton
    L_Clavicle,clavicle,1.58,133.77,-3.71,12.85,136.30,3.19
    L_Humerus,humerus,11.97,101.17,-6.06,19.20,134.34,0.49

    skin
    Gland_Lobules,gland lobules,-11.70,117.67,6.89,11.70,124.85,11.32
    Lactiferous_Duct,lactiferous duct,-11.50,118.29,8.01,11.50,124.21,11.52

  2.) Add f_circulatory.json, f_connective.json, f_muscles.json, f_nervous.json,
  f_organs_no_breast.json, f_skeleton.json, f_skin_with_breasts.json to
  res/raw. These files contain metadata for the geometry shown in every layer.
  They are read by LayersLoader.load() (which runs on a background thread and
  is indirectly called from the GL thread in Render.loadLayers() with a hop
  to the UI thread in BodyActivity.load()). The json files are expected to have
  a single top-level element called "draw_groups", which contains a list of
  objects. Each of the objects is called a "draw group" and contains these
  fields:
    "attribs": A path to the utf8 file containing the attribute data (positions,
               normals, tex coords).
    "dimensions": Ignored, always [3, 3, 2]
    "semantics": Ignored, always [ "POSITION", "NORMAL", "TEXCOORD" ]

    "indices": A path to the utf8 file containing the index data for this draw
               group. Every model consists of indexed triangles.
    "num_indices": integer, number of indices belonging to this draw group.

    "material": Ignored, the material name.
    "texture": String, path to a texture image used by this model. Optional.
    "diffuse_color": List of 3 floats, rgb diffuse color. Optional.
       Either "texture" or "diffuse_color" should be present.

    "draws": An array of "draw" objects, each of which has these fiels:
      "geometry": The name of the draw. This is used to map the draw to one of
                  the entities in f_entities.txt (first column in that file).
      "range": A list with two integers, offset and count, which describe which
               subrange of "indices" belong to this draw.

  For example, all ribs might share a single texture and hence be all in the
  same draw group. Every rib would be a draw object in that group. Usually, the
  whole draw group is drawn with a single glDrawElements() call, but if the user
  taps a rib, only that rib is drawn, using the "range" information. The
  "geometry" field is used to look up the name of the rib from f_entities, and
  that text is displayed in a bubble.

  One of these json files might look like this:

    {
      "draw_groups": [
          "attribs": "bin/f_muscles/lambert6SG1_attribs.utf8",
          "dimensions": [ 3, 3, 2 ],
          "draws": [ {
             "geometry": "L_Muscle_1",
             "range": [ 0, 1716 ]
          }, {
             "geometry": "L_Muscle_2",
             "range": [ 1716, 3600 ]
          } ],
          "indices": "bin/f_muscles/lambert6SG1_indices.utf8",
          "material": "lambert6SG1",
          "numIndices": 5316,
          "semantics": [ "POSITION", "NORMAL", "TEXCOORD" ],
          "texture": "textures/muscles_back_muscles_2.jpg"
       } ]
    }

  Note that attribs, indices, and texture are all virtual filenames which are
  mapped to resources using the files described below.

  4.) In LayersLoader.java fill in the TEXTURES map to map texture filenames
  referenced in your json files to resource ids, for example:

    static final Map<String, Integer> TEXTURES = new HashMap<String, Integer>() {{
        put("textures/arm.jpg", R.drawable.arm);
        put("textures/leg.jpg", R.drawable.leg);
        // etc
    }};

  5.) Add texture resources to res/drawable-nodpi, one file per texture.
  Textures are expected to be ETC1-compressed image files which usually have
  the extension pkm. You can use android-sdk/tools/etc1tool to convert png
  files to pkm (and ImageMagick to convert every image file format to png).

  6.) In FP.java fill in the fpEntries map to map utf8 filenames to ranges of
  raw data file resources, for example:

    @SuppressWarnings("serial")
    private static final Map<String, FPEntry> fpEntries = new HashMap<String, FPEntry>() {{
        put("bin/f_skin/Eye_SG1_indices.utf8", new FPEntry(R.raw.f_3b3ec079, 0, 10080));
        put("bin/f_skin/Female_Repro_SG4_indices.utf8", new FPEntry(R.raw.f_3b3ec079, 10080, 147120));
        // etc
    }};

  7.) Add the clumped utf8 data files as used by the web version to res/raw.

Us using utf8 files for data storage is for compatibility with the web version,
see http://code.google.com/p/webgl-loader/wiki/UtfEight (and the slides linked
from the webgl-loader project page) why the web version uses utf8 data files.
The web version was changed around quite a bit before open sourcing and the
file formats aren't that similar any more, so the android file format could now
be simplified.


Actually building
-----------------

0. Download Android SDK, NDK
1. In Eclipse, File->New->Project...->Android Project
2. Create project from existing source, s3v/android
3. Use the Android 3.0 SDK
4. Finish
5. Right-click project, Properties -> Java Build Path -> Libraries
   -> Add JARs... -> Add s3v/libs/libGoogleAnalytics.jar
6. cd jni && ndk-build  # To build the native bits
7. Build & Run in eclipse. s3v uses OpenGL ES 2.0, which the simulator doesn't
   support, so make sure to connect a physical device via USB


Releasing to the market
-----------------------

* Make sure that `BodyActivity.DEVELOPER_MODE` is `false`
* Make sure that `BodyActivity.ANALYTICS_ACCOUNT_ID` is correct
* Edit AndroidManifest.xml with your own `package=`, `android:versionCode=`,
  and `android:versionName=`
* Use your own icon.png in res/drawable-hdpi and res/drawable-mdpi
* Use your own res/drawable/body_copyright.png
